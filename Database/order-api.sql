CREATE OR REPLACE PACKAGE ESHOP_ORDERS_API AS

PROCEDURE SP_ORDERS_GETALLORDERS
(
    ORD_CURSOR OUT SYS_REFCURSOR
);

PROCEDURE SP_ORDERS_GETALLCUSTOMERORDERS
(
    ORD_CUSTOMER_ID IN ORDERS.CUSTOMER_ID%TYPE,
    ORD_CURSOR OUT SYS_REFCURSOR
);

PROCEDURE SP_ORDERS_GETORDERBYID
(
    ORD_ID IN ORDERS.ID%TYPE,
    ORD_CURSOR OUT SYS_REFCURSOR
);

PROCEDURE SP_ORDERS_GETALLORDERSWITHORDERITEMS
(
    ORD_CURSOR OUT SYS_REFCURSOR
);

PROCEDURE SP_ORDERS_GETALLORDERITEMS
(
    OIT_CURSOR OUT SYS_REFCURSOR
);

PROCEDURE SP_ORDERS_GETORDERITEMSBYID
(
    OIT_ID IN ORDER_ITEMS.ID%TYPE,
    OIT_CURSOR OUT SYS_REFCURSOR
);

PROCEDURE SP_ORDERS_GETORDERITEMSBYORDERID
(
    ORD_ID IN ORDER_ITEMS.ORDER_ID%TYPE,
    OIT_CURSOR OUT SYS_REFCURSOR
);

PROCEDURE SP_ORDERS_ADDORDERS
(
    ORD_CUSTOMER_ID IN ORDERS.CUSTOMER_ID%TYPE,
    ORD_TOTAL IN ORDERS.TOTAL%TYPE,
    ORD_CURSOR OUT SYS_REFCURSOR
);

PROCEDURE SP_ORDERS_ADDORDERITEMS
(
    OIT_ORDER_ID IN ORDER_ITEMS.ORDER_ID%TYPE,
    OIT_PRODUCT_ID IN ORDER_ITEMS.PRODUCT_ID%TYPE,
    OIT_QUANTITY IN ORDER_ITEMS.QUANTITY%TYPE,
    OIT_ITEM_PRICE IN ORDER_ITEMS.ITEM_PRICE%TYPE
);

END ESHOP_ORDERS_API;
/

CREATE OR REPLACE PACKAGE BODY ESHOP_ORDERS_API AS

PROCEDURE SP_ORDERS_GETALLORDERS
(
    ORD_CURSOR OUT SYS_REFCURSOR
)
AS 
BEGIN
OPEN ORD_CURSOR FOR
SELECT ORDERS.* FROM ORDERS;
END;

PROCEDURE SP_ORDERS_GETALLCUSTOMERORDERS
(
    ORD_CUSTOMER_ID IN ORDERS.CUSTOMER_ID%TYPE,
    ORD_CURSOR OUT SYS_REFCURSOR
)
AS 
BEGIN 
OPEN ORD_CURSOR FOR 
SELECT ORDERS.* FROM ORDERS WHERE ORDERS.CUSTOMER_ID=ORD_CUSTOMER_ID;
END;

PROCEDURE SP_ORDERS_GETALLORDERSWITHORDERITEMS
(
    ORD_CURSOR OUT SYS_REFCURSOR
)
AS 
BEGIN
OPEN ORD_CURSOR FOR
SELECT ORDER_ITEMS.* FROM ORDER_ITEMS;
END;

PROCEDURE SP_ORDERS_GETORDERBYID
(
    ORD_ID IN ORDERS.ID%TYPE,
    ORD_CURSOR OUT SYS_REFCURSOR
)
AS 
BEGIN 
OPEN ORD_CURSOR FOR 
SELECT * FROM ORDERS WHERE ID=ORD_ID;
END;

PROCEDURE SP_ORDERS_GETALLORDERITEMS
(
    OIT_CURSOR OUT SYS_REFCURSOR
)
AS 
BEGIN
OPEN OIT_CURSOR FOR
SELECT ORDER_ITEMS.* FROM ORDER_ITEMS;
END;

PROCEDURE SP_ORDERS_GETORDERITEMSBYID
(
    OIT_ID IN ORDER_ITEMS.ID%TYPE,
    OIT_CURSOR OUT SYS_REFCURSOR
)
AS 
BEGIN
OPEN OIT_CURSOR FOR 
SELECT * FROM ORDER_ITEMS WHERE ID=OIT_ID;
END;

PROCEDURE SP_ORDERS_GETORDERITEMSBYORDERID
(
    ORD_ID IN ORDER_ITEMS.ORDER_ID%TYPE,
    OIT_CURSOR OUT SYS_REFCURSOR
)
AS 
BEGIN 
OPEN OIT_CURSOR FOR 
SELECT ORDER_ITEMS.* FROM ORDER_ITEMS WHERE ORDER_ITEMS.ORDER_ID=ORD_ID;
END;

PROCEDURE SP_ORDERS_ADDORDERS
(
    ORD_CUSTOMER_ID IN ORDERS.CUSTOMER_ID%TYPE,
    ORD_TOTAL IN ORDERS.TOTAL%TYPE,
    ORD_CURSOR OUT SYS_REFCURSOR
)
AS 
ORD_ID INT;
BEGIN 
INSERT INTO ORDERS(CUSTOMER_ID, TOTAL, CREATED_AT)
VALUES(ORD_CUSTOMER_ID, ORD_TOTAL, CURRENT_TIMESTAMP(2))
RETURNING ID INTO ORD_ID;
OPEN ORD_CURSOR FOR
SELECT * FROM ORDERS WHERE ID=ORD_ID;
END;

PROCEDURE SP_ORDERS_ADDORDERITEMS
(
    OIT_ORDER_ID IN ORDER_ITEMS.ORDER_ID%TYPE,
    OIT_PRODUCT_ID IN ORDER_ITEMS.PRODUCT_ID%TYPE,
    OIT_QUANTITY IN ORDER_ITEMS.QUANTITY%TYPE,
    OIT_ITEM_PRICE IN ORDER_ITEMS.ITEM_PRICE%TYPE
)
AS 
BEGIN 
INSERT INTO ORDER_ITEMS(ORDER_ID, PRODUCT_ID, QUANTITY, ITEM_PRICE)
VALUES(OIT_ORDER_ID, OIT_PRODUCT_ID, OIT_QUANTITY, OIT_ITEM_PRICE);
END;

END ESHOP_ORDERS_API;
/


